#include <mega128.h>
#include <delay.h>

#define Trigger PORTB.0   //트리거로 초음파신호 전방에 방사
#define Echo PIND.0       //트리거가 갔다가 되돌아오는 시간을 나타내는 신호

unsigned int out1;

char bit_data[41]; //dht11 에서 수신되는 데이터가 총 start bit(1)+ data bit(40) 41byte
volatile int DHT_cnt=0;
int StDone=0;       //시작을 알리는 신호의 끝을 알리는 플래그
int toggle=0;
int time=0;
int i=0;
int humi=0;
int temp=0;
    
char Sleep = 'A';    // 수면을 감지하면 app 으로 전송 하는 명령어
char WakeUp = 'B';   // 기상을 감지하면 app 으로 전송 하는 명령어
char Pee = 'C';      // 기저귀의 젖음을 감지하면 app 으로 전송하는 명령어

void StartOut(void);
void DHT_Read(void);
void getEcho(void);
void getRawData(void);
void getAcclDegree(void);
void getGyroDegree(void);
void compFilter(void);
unsigned char MPU6050_read(unsigned char addr);
void MPU6050_write(unsigned char addr, char data);
 
volatile int gx = 0, gy = 0, gz = 0, ax = 0, ay = 0, az = 0;                 //자이로 센서에서 사용하는 변수
volatile long x_aTmp1, y_aTmp1, z_aTmp1;
volatile float x_aTmp2, y_aTmp2, z_aTmp2, x_aResult, y_aResult, z_aResult;
volatile float x_gTmp1, y_gTmp1, x_gResult, y_gResult, z_gTmp1, z_gResult;
float kp = 12.0f, ki = 1.0f;
volatile float xTmp1, yTmp1, xTmp2, yTmp2, xIntTmp1, yIntTmp1    ;
volatile float xFilterAngle = 0.0f, yFilterAngle = 0.0f;
volatile int pitch = 0, roll = 0, yaw=0;
bit gyr0_flag=0;    // APP에서 "0" 을 수신 받았다는 것을 확인 하기 위한 변수
bit gyr1_flag=0;    // APP에서 "1" 을 수신 받았다는 것을 확인 하기 위한 변수
int adc1,avr1,dif;   // 자이로 센서 값을 평균 내기 위한 변수
int cnt=0;           // 자이로 센서 값을 평균 내기 위해 일정 시간 센서 값을 받아들일 시간을 만드는 변수

char *pStr;
int i=0;
long sum1=0;     // 자이로 센서 값을 평균 내기 위한 변수

volatile int avr_pit=0, avr_rol=0, avr_yaw=0;
unsigned char buffer[12];

void TIMER_Init1(void)
{
    TCCR1A = 0x00;
    TCCR1B = 0x01;
}

interrupt [TIM1_OVF] void timer_int1(void)
{
    TIMSK = 0x04;
    EIMSK = 0x00;
    StDone = 1;
}

interrupt [EXT_INT4] void external_int4(void)   //Atmega128보드에서 Start신호를 보낸 뒤 데이터를 구분해주는 인터럽
{
    if(toggle==0)\
    {
        TIMSK = 0x04;    // TOIE0 = '1';    
        TCNT1 = 0;       // 타이머/카운터0 레지스터 초기값
        EICRB = 0x03;    // ISC41=1, ISC40=0 -> 하강엣지시 인터럽트 작동(INT4)                                  트
        toggle = 1;
    } 
    else if(toggle==1)
    {
        TIMSK = 0x04;    // TOIE0 = '1';    
        EICRB = 0x03;    // ISC41=1, ISC40=1 -> 상승엣지시 인터럽트 작동(INT4)
        time=TCNT1;
        if(time>=100*8) bit_data[DHT_cnt++]='1';
        else if(time<100*8) bit_data[DHT_cnt++]='0';     
        toggle = 0;
    }
}

void USART_Init( )
{
  UCSR1B = 0x98; // Receive interrupt
  UCSR0B = 0x98;    //Receive(RX) 및 Transmit(TX) Enable
  UCSR0C = UCSR1C = 0x06;    // UARTMode, 8 Bit Data, No Parity, 1 Stop Bit
  UBRR0H = UBRR1H = 0;       //16Mhz, baud rate = 115200 (if 9600, 0)
  UBRR0L = UBRR1L = 103;       //16Mhz, baud rate = 115200 (if 9600, 103)
}

void USART0_Transmit( char data )
{
    // Wait for empty transmit buffer
    while ( !( UCSR0A & 0x20 ) )   // (1<<UDRE) 
    ;
    // Put data into buffer, sends the data
    UDR0 = data;
}

void USART1_Transmit( char data )
{
    // Wait for empty transmit buffer
    while ( !( UCSR1A & 0x20 ) )   // (1<<UDRE) 
    ;
    // Put data into buffer, sends the data
    UDR1 = data;
}

interrupt [USART1_RXC] void usart1_rx_isr(void)
{
              unsigned char ch;
              ch = UDR1;
              USART0_Transmit(ch);              
             switch(ch){
                 case '0' :            
                    USART0_Transmit('a');
                    break;
                 case '1' :
                    USART0_Transmit('b');
                    break;
                 case '2' :            
                    USART0_Transmit('c');
                    break;
                 case '3' :            
                    USART0_Transmit('d');
                    break;
                 // mp3 모듈 제어
                 case 'D' :            
                    USART0_Transmit('D');
                    break;
                 case 'E' :            
                    USART0_Transmit('E');
                    break;
                 case 'F' :            
                    USART0_Transmit('F');
                    break;
                 case 'G' :            
                    USART0_Transmit('G');
                    break;
                 //자동 스윙제어
                 case 'H' :            
                    USART0_Transmit('H');
                    break;
                 case 'I' :            
                    USART0_Transmit('I');
                    break;
                 case 'J' :            
                    USART0_Transmit('J');
                    break;
                 case 'K' :            
                    USART0_Transmit('K');
                    break;
                 //시트 온도조절
                 default  :
                    break;
              } 
     
} 

interrupt [USART0_RXC] void usart0_rx_isr(void)
{
      unsigned char mp;
      mp = UDR0;
      USART1_Transmit(mp);
}

void PORT_Init(void)
{
    DDRB=0xff;
    DDRD=0x00;
}

void main(void)
{
    PORT_Init();
    TWSR = 0x00;
    TWBR = 12;   //SCK:400000Hz
    USART_Init(); // 9600/8/n/1/n
    MPU6050_write(0x6B,0x00);
    MPU6050_write(0x6C,0x00);
    TIMER_Init1();
    SREG=0x80;
    
    getRawData(); 
    getAcclDegree();
    getGyroDegree();
    compFilter();
    for(i=0;i<10;i++)  // i가 10이 될 때 까지 roll 값을 sum1 에 저장
    { 
    delay_ms(1); 
    sum1+=roll; 
    }            
    avr1=sum1/10;
    while(1)
    { 
        DHT_Read();
        getRawData();              
        getAcclDegree();
        getGyroDegree();            
        compFilter(); 
        adc1=roll;
        sum1-=avr1;  
        sum1+=adc1;           // 새로운 값으로 바꿔서 더한 후
        avr1=sum1/10;         // 평균을 다시 계산
        dif=adc1-avr1;          // 평균 값과 제일 최근에 들어온 값의 차이를 추출
        
        Trigger=1;      //trigger 발생
        delay_us(10);  
        Trigger=0;
        getEcho();
            
         if((dif<-5)||(dif>5))  // 차이가 -5 이하 & 5 이상 이면 기상으로 간주 
         {
            cnt=0;
            if(gyr1_flag==0)
            {      
            USART1_Transmit(WakeUp);    // app 으로 기상 flag 인  'B' 이라는 문구를 전송
            delay_ms(10);     
            gyr0_flag=0;                         
            } 
         }
         else
         {
            if(cnt<15)     // 평균과의 차이가 -5 이하 & 5 이상 이 아니면 15번동안 count 하면서 값을 추출
            {
            cnt++;   
            }
            else if(gyr0_flag==0)    // 15번동안 값을 비교했는데 움직임이 감지가 안되면 수면으로 간주
            {                  
            USART1_Transmit(Sleep);   // app 으로 수면 flag 인  'A' 이라는 문구를 전송
            delay_ms(10);        
            gyr1_flag=0;  
            }          
         }
         
         if(humi>90)
         {
            USART1_Transmit(Pee);
         }
    }
}

void StartOut(void) //Atmega보드에서 dht11에 시작을 알리는 신호
{ 
    DDRE = 0xff;
    PORTE = 0xff;
    delay_ms(100); //Atmega보드에서 100ms간 High 신호 전송
    PORTE = 0x00;
    delay_ms(18);  //Atmega보드에서 18ms간 LOW 신호 전송
    PORTE = 0xff;
    delay_us(30);  //Atmega보드에서 30us간 HIGH 신호 전송
    
    EICRB = 0x03;  //ISC41=1,ISC40=1 -> 상승엣지시 인터럽트 작동(INT4): 데이터 바이트 구분
    EIMSK = 0x10;  //외부 인터럽트4번 인에이블
    DHT_cnt=0;
}

void DHT_Read(void) //DHT11 data 40byte를 read
{
    delay_ms(100);
    StartOut();
    while(StDone==0);
    StDone = 0;
        
    humi = 0;
    temp = 0;
        
    for(i=0;i<8;i++)
    {
        if(bit_data[i+1]=='1')
            humi+=1<<(7-i);
    }
        
    for(i=0;i<8;i++)
    {
        if(bit_data[i+17]=='1')
            temp+=1<<(7-i);
    }
}

void getEcho(void)    //초음파 신호 돌아온시간으로 cm 계산
{
    while(!Echo);    //Set 될때까지 대기
    TCNT1=0;
    TCCR1B=2;        //카운터 시작, 8분주 = 0.5us
    while(Echo);     //Clear 될때까지 대기                             
    TCCR1B=8;        //카운터 정지
    out1=TCNT1/116;  // Cm로 변경
}

unsigned char MPU6050_read(unsigned char addr)
{
    unsigned char dat;
    TWCR = 0xA4;// ((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)) -> TWEN으로 TWI 허가 / TWSTA는 마스터로서의 동작, 버스사용이 가능하면 START 조건 출력 / TWINT TW인터럽트 
    while(((TWCR & 0x80) == 0x00 || ((TWSR & 0xF8) != 0x08)));// TWCR레지스터의 TWINT가 0 이거나 TWSR의 TWS3비트가 1이 아니라면 계속 반복
    TWDR = 0xD0;
    TWCR = 0x84;// ((1<<TWINT)|(1<<TWEN)) -> TWEN으로 TWI 허가 / TWINT TW인터럽트
    while(((TWCR & 0x80) == 0x00 || ((TWSR & 0xF8) != 0x18)));// TWCR레지스터의 TWINT가 0 이거나
    TWDR = addr;
    TWCR = 0x84;// ((1<<TWINT)|(1<<TWEN)) -> TWEN으로 TWI 허가 / TWINT TW인터럽트
    while(((TWCR & 0x80) == 0x00 || ((TWSR & 0xF8) != 0x28)));// TWCR레지스터의 TWINT가 0 이거나
    TWCR = 0xA4;// ((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)) -> TWEN으로 TWI 허가 / TWSTA는 마스터로서의 동작, 버스사용이 가능하면 START 조건 출력 / TWINT TW인터럽트    
    //-------------------------------------------------------------
    while(((TWCR & 0x80) == 0x00 || ((TWSR & 0xF8) != 0x10)));// TWCR레지스터의 TWINT가 0 이거나
    TWDR = 0xD1;
    TWCR = 0x84;// ((1<<TWINT)|(1<<TWEN)) -> TWEN으로 TWI 허가 / TWINT TW인터럽트
    while(((TWCR & 0x80) == 0x00 || ((TWSR & 0xF8) != 0x40)));// TWCR레지스터의 TWINT가 0 이거나 
    TWCR = 0x84;// ((1<<TWINT)|(1<<TWEN)) -> TWEN으로 TWI 허가 / TWINT TW인터럽트 
    while(((TWCR & 0x80) == 0x00 || ((TWSR & 0xF8) != 0x58)));// TWCR레지스터의 TWINT가 0 이거나
    dat = TWDR;
    TWCR = 0x94;// ((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)) -> TWEN으로 TWI 허가 / TWSTO는 마스터에선 TWI STOP, 슬레이브에선 SCL과 SDA 신호선을 High-Z상태로 하여 에러상태 해제 / TWINT TW인터럽트  
    return dat;
}
// 자이로 센서
void MPU6050_write(unsigned char addr, char data)
{
    TWCR = 0xA4;// ((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)) -> TWEN으로 TWI 허가 / TWSTA는 마스터로서의 동작, 버스사용이 가능하면 START 조건 출력 / TWINT TW인터럽트 
    while(((TWCR & 0x80) == 0x00 || ((TWSR & 0xF8) != 0x08)));// TWCR레지스터의 TWINT가 0 이거나
    TWDR = 0xD0;
    TWCR = 0x84;// ((1<<TWINT)|(1<<TWEN)) -> TWEN으로 TWI 허가 / TWINT TW인터럽트 
    while(((TWCR & 0x80) == 0x00 || ((TWSR & 0xF8) != 0x18)));// TWCR레지스터의 TWINT가 0 이거나
    TWDR = addr; // addr = 0x43
    TWCR = 0x84;// ((1<<TWINT)|(1<<TWEN)) -> TWEN으로 TWI 허가 / TWINT TW인터럽트
    while(((TWCR & 0x80) == 0x00 || ((TWSR & 0xF8) != 0x28)));// TWCR레지스터의 TWINT가 0 이거나    
    //-------------------------------------------------------------  
    TWDR = data;
    TWCR = 0x84;// ((1<<TWINT)|(1<<TWEN)) -> TWEN으로 TWI 허가 / TWINT TW인터럽트
    while(((TWCR & 0x80) == 0x00 || ((TWSR & 0xF8) != 0x28)));// TWCR레지스터의 TWINT가 0 이거나
    TWCR = 0x94;// ((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)) -> TWEN으로 TWI 허가 / TWSTO는 마스터에선 TWI STOP, 슬레이브에선 SCL과 SDA 신호선을 High-Z상태로 하여 에러상태 해제 / TWINT TW인터럽트
    delay_us(50);
}
// 자이로 센서
void getRawData()
{
    buffer[0] = MPU6050_read(0x3B);// ax-H
    buffer[1] = MPU6050_read(0x3C);// ax-L
    buffer[2] = MPU6050_read(0x3D);// ay-H
    buffer[3] = MPU6050_read(0x3E);// ay-L
    buffer[4] = MPU6050_read(0x3F);// az-H
    buffer[5] = MPU6050_read(0x40);// ax-L 
    
    buffer[6] = MPU6050_read(0x43);// gx-H
    buffer[7] = MPU6050_read(0x44);// gx-L
    buffer[8] = MPU6050_read(0x45);// gy-H
    buffer[9] = MPU6050_read(0x46);// gy-L
    buffer[10] = MPU6050_read(0x47);//gz-H
    buffer[11] = MPU6050_read(0x48);//gz-L  
    
    ax = (int)buffer[0] << 8 | (int)buffer[1];
    ay = (int)buffer[2] << 8 | (int)buffer[3];
    az = (int)buffer[4] << 8 | (int)buffer[5];
    gx = (int)buffer[6] << 8 | (int)buffer[7];
    gy = (int)buffer[8] << 8 | (int)buffer[9];
    gz = (int)buffer[10] << 8 | (int)buffer[11];
}
// 자이로 센서
void getAcclDegree(void)// 가속도 측정값들을 라디안 단위로
{
    x_aTmp1=((long)ay*(long)ay)+((long)az*(long)az);
    y_aTmp1=((long)ax*(long)ax)+((long)az*(long)az);
    z_aTmp1=((long)ay*(long)ay)+((long)az*(long)az);
    
    x_aTmp2=sqrt((float)x_aTmp1);
    y_aTmp2=sqrt((float)y_aTmp1);
    z_aTmp2=sqrt((float)z_aTmp1);
    
    x_aResult=atan((float)ax/x_aTmp2);
    y_aResult=atan((float)ay/y_aTmp2);
    z_aResult=atan(z_aTmp2/(float)az);//가속도 결과값 
}
// 자이로 센서 
void getGyroDegree(void)// 자이로 측정값들을 라디안 단위로
{
    x_gTmp1=(float)gx/65536;
    y_gTmp1=(float)gy/65536;
    z_gTmp1=(float)gz/65536;
    
    x_gTmp1=x_gTmp1*1.8;
    y_gTmp1=y_gTmp1*1.8;
    z_gTmp1=z_gTmp1*1.8;
    
    x_gResult=x_gTmp1;   //각속도 결과값
    y_gResult=y_gTmp1;
    z_gResult=z_gTmp1;
}
// 자이로 센서
void compFilter(void) // 불안정한 센서 값을 필터링 해주는 상보 필터
{
    xTmp1=(-y_aResult)+(float)xFilterAngle; // 현재 각도와, 최정 얻은 값의 차이를 얻음 (ERROR 값)
    xIntTmp1=(float)xIntTmp1+(xTmp1*0.01);  // ERROR 값을 적분함
    xTmp2=(-kp*xTmp1)+(-ki*(float)xIntTmp1)+x_gResult; 
    xFilterAngle=xFilterAngle+(xTmp2*0.01);  // 각속도 값의 적분
    pitch=(int)(xFilterAngle*180/PI);        // 적분된 값이 라디안 이므로 각도로 바꾸어 줌
    
    yTmp1=(-x_aResult)+(float)yFilterAngle;
    yIntTmp1=(float)yIntTmp1+(yTmp1*0.01);
    yTmp2=(-kp*yTmp1)+(-ki*(float)yIntTmp1)+y_gResult;
    yFilterAngle+=yTmp2*0.01;
    roll=(int)(yFilterAngle*180/PI);
  
    yaw=(int)(0.976*(yaw+((gz/131.)*0.001)))+(0.024*(atan2(ax, ay)*180/PI));
}

