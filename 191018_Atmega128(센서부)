#include <stdlib.h>
#include <delay.h>
#include <mega128.h>
#include <math.h>
#include <stdio.h>
#include <string.h>

#define SWING 0                 
#define SEAT 1
#define HEIGHT 2
#define STAUS 3
#define PARENT 4
#define MODE 5 

void StartOut(void);
void DHT_Read(void);

char bit_data[41]; //dht11 에서 수신되는 데이터가 총 start bit(1)+ data bit(40) 41byte
volatile int DHT_cnt=0;
int StDone=0;       //시작을 알리는 신호의 끝을 알리는 플래그
int toggle=0;
int time=0;
int humi=0;
int temp=0;
int Humidflag0=0, Humidflag1=0;   // APP에서 "0" 을 수신 받았다는 것을 확인 하기 위한 변수

unsigned int Port_char[] ={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90, 0x88, 0x83, 0xA7, 0xA1, 0x86, 0x8E, 0xFF};  // 0~F 의 문자표
unsigned int Port_fnd[] ={0x1f,0x2f,0x4f,0x8f,0x0f};    // FND0 ON, FND1 ON, FND2 ON, FND3 ON, ALL FND OFF

int i=0;
int j=0;
int k=0;
int l=0;

int SET[6] = {0,0,0,0,0,0};
int EX[6] = {0,0,0,0,0,0};    

unsigned char buffer[12];

void Init_FND(void)
{
    DDRE = 0xf0;    //   PORTE.4~PORTE.7 FND 출력  (PE.4 : FND0, PE.5, FND1, PE.6 : FND2, PE.7 : FND3)
    DDRC = 0xff;    //   세그먼트의 문자포트 출력(PB.0:a, PB.1:b, PB.2:c, PB.3:d, PB.4:e, PB.5:f, PB.6:g, PB.7:dot)       
    PORTE = 0xf0;   //
}

void Init_Timer1(void)
{
    TCCR1A = 0x00;
    TCCR1B = 0x01;
}

void Init_Timer3()
{
    TCCR3B = 0b00000100; //분주비를 clk / 256으로 설정하였습니다. (시간을 구하는 방법 또한 아래서 자세히!!)
 
    TIMSK = (1<<TOIE3); //타이머/카운터1 의 오버플로우 개별 인터럽트를 허용합니다.
 
    TCNT3H = 0xFB; //1초의 오버플로우를 만들기 위한 타이머/카운터1의 초기값을 정해줍니다.
    TCNT3L = 0x1D;
}

interrupt [EXT_INT4] void external_int4(void)   //Atmega128보드에서 Start신호를 보낸 뒤 데이터를 구분해주는 인터럽
{
    if(toggle==0)
    {
        TIMSK = 0x04;            // TOIE0 = '1';    
        TCNT1 = 0;               // 타이머/카운터0 레지스터 초기값
        EICRB=0b00000010;    // ISC41=1, ISC40=0 ☞ 하강엣지시 인터럽트 작동(INT4)
        toggle = 1;
    } 
    else if(toggle==1)
    {
        TIMSK = 0x04;            // TOIE0 = '1';    
        EICRB=0b00000011;    // ISC41=1, ISC40=1 ☞ 상승엣지시 인터럽트 작동(INT4)
        time=TCNT1;
        if(time>=100*8) bit_data[DHT_cnt++]='1';
        else if(time<100*8) bit_data[DHT_cnt++]='0';     
        toggle = 0;
    }
}

interrupt [TIM1_OVF] void timer_int1(void)
{
    TIMSK = 0x04;            // TOIE0 = '1';
    EIMSK=0b00000000;    // 외부 인터럽트4 인에이블 
    StDone=1;  
}

void USART_Init( )
{
    UCSR1B = 0x98; // Receive interrupt
    UCSR0B = 0x98;    //Receive(RX) 및 Transmit(TX) Enable
    UCSR0C = UCSR1C = 0x06;    // UARTMode, 8 Bit Data, No Parity, 1 Stop Bit
    UBRR0H = UBRR1H = 0;       //16Mhz, baud rate = 115200 (if 9600, 0)
    UBRR0L = UBRR1L = 103;       //16Mhz, baud rate = 115200 (if 9600, 103)
}

void USART0_Transmit( char data )
{
    // Wait for empty transmit buffer
    while ( !( UCSR0A & 0x20 ) );   // (1<<UDRE) 
    // Put data into buffer, sends the data
    UDR0 = data;
}

void USART1_Transmit( char data )
{
    // Wait for empty transmit buffer
    while ( !( UCSR1A & 0x20 ) );   // (1<<UDRE) 
    // Put data into buffer, sends the data
    UDR1 = data;
}

interrupt [USART1_RXC] void usart1_rx_isr(void)
{
    unsigned char ch;
    ch = UDR1;
    USART0_Transmit(ch); 
    switch(ch)
    {
        case 'D' :            
            SET[SWING] = 0;
            SwLevZero();   
            break;
        case 'E' :
            SET[SWING] = 1;
            SwLevOne();
            break;
        case 'F' :            
            SET[SWING] = 2;
            SwLevTwo();
            break;
        case 'G' :               
            SET[SWING] = 3;
            SwLevThree();
            break;
        case 'L' :              
            SET[SEAT] = 0; // 등받이0단계
            break;
        case 'M' :
            SET[SEAT] = 1; // 등받이1단계
            break;
        case 'N' :               
            SET[SEAT] = 2; //등받이 2단계
            break;
        case 'O' :
            SET[HEIGHT] = 0;
            break;
        case 'P' :
            SET[HEIGHT] = 1;
            break;
        case 'Q' :
            SET[HEIGHT] = 2;
            break;
        case 'R' :
            SET[HEIGHT] = 3;
            break;
        case 'T':
            SET[SWING] = 0;
            SET[SEAT] = 0;
            SET[HEIGHT] = 0;
            SET[STATUS] = 1;
            SET[PARENT] = 0;
            SET[MODE] = 0;
            break;
        case 'A':
            SET[STATUS] = 1;
            break;
        case 'B':
            SET[STATUS] = 2;
            break;
        case 'V':
            SET[PARENT] = 1;
            break;                   
} 

interrupt [USART0_RXC] void usart0_rx_isr(void)
{
    unsigned char mp;
    mp = UDR0;
    USART1_Transmit(mp);
}

void main(void)
{
    USART_Init(); // 9600/8/n/1/n
    Init_FND();
    Init_Timer1();
    Init_Timer3();  
    EICRB = 0x03;
    SREG |= 0x80;
    
    while(1){ 
            DHT_Read();
           
            if(Humidflag1==0)
            {
            if(humi>90){
            USART1_Transmit('H');
            Humidflag0=0;
            Humidflag1=1;
            }
            }
        
            else if(Humidflag0==0)
            {
            if(humi<=90)
            {
            USART1_Transmit('V');
            Humidflag0=1;
            Humidflag1=0;
            }
            }
    }
  }

void SwLevZero()
{
if(EX[SWING] == 1)
{
for(k=1;k>0;k--)
{
for(j=9;j>0;j--)
    {  
    for(delay=0;delay<=20;delay++)
        {
            PORTE = Port_fnd[3]; 
            PORTC = Port_char[j]; 
            delay_ms(5);     
            PORTE = Port_fnd[2]; 
            PORTC = Port_char[k];
            delay_ms(5);
            PORTE = Port_fnd[1]; 
            PORTC = Port_char[0];
            delay_ms(5);
            PORTE = Port_fnd[0]; 
            PORTC = Port_char[0];
            delay_ms(5);                                            
        }    
    }
}
else if(EX[SWING] == 2)
{
for(k=2;k>0;k--)
{
for(j=9;j>0;j--)
    {  
    for(delay=0;delay<=20;delay++)
        {
            PORTE = Port_fnd[3]; 
            PORTC = Port_char[j]; 
            delay_ms(5);     
            PORTE = Port_fnd[2]; 
            PORTC = Port_char[k];
            delay_ms(5);
            PORTE = Port_fnd[1]; 
            PORTC = Port_char[0];
            delay_ms(5);
            PORTE = Port_fnd[0]; 
            PORTC = Port_char[0];
            delay_ms(5);                                            
        }    
    }
}
}
else if(EX[SWING] == 3)
{
for(k=3;k>0;k--)
{
for(j=9;j>0;j--)
    {  
    for(delay=0;delay<=20;delay++)
        {
            PORTE = Port_fnd[3]; 
            PORTC = Port_char[j]; 
            delay_ms(5);     
            PORTE = Port_fnd[2]; 
            PORTC = Port_char[k];
            delay_ms(5);
            PORTE = Port_fnd[1]; 
            PORTC = Port_char[0];
            delay_ms(5);
            PORTE = Port_fnd[0]; 
            PORTC = Port_char[0];
            delay_ms(5);                                            
        }    
    }
}
}
EX[SWING] = 0;
}
  
void SwLevOne()            
{ 
if(EX[SWING] == 0)
{    
for(k=0;k<3;k++)
{
for(j=0;j<10;j++)
    {  
    for(delay=0;delay<=20;delay++)
        {
            PORTE = Port_fnd[3]; 
            PORTC = Port_char[j]; 
            delay_ms(5);     
            PORTE = Port_fnd[2]; 
            PORTC = Port_char[k];
            delay_ms(5);
            PORTE = Port_fnd[1]; 
            PORTC = Port_char[0];
            delay_ms(5);
            PORTE = Port_fnd[0]; 
            PORTC = Port_char[0];
            delay_ms(5);                                            
        }    
    }
}
}
    
else if(EX[SWING] == 1)
{
for(k=1;k<3;k++)
{
for(j=0;j<10;j++)
    {  
    for(delay=0;delay<=20;delay++)
        {
            PORTE = Port_fnd[3]; 
            PORTC = Port_char[j]; 
            delay_ms(5);     
            PORTE = Port_fnd[2]; 
            PORTC = Port_char[k];
            delay_ms(5);
            PORTE = Port_fnd[1]; 
            PORTC = Port_char[0];
            delay_ms(5);
            PORTE = Port_fnd[0]; 
            PORTC = Port_char[0];
            delay_ms(5);                                            
        }    
    }
}
}

else if(EX[SWING] == 2)
{
for(k=2;k<3;k++)
{
for(j=0;j<10;j++)
    {  
    for(delay=0;delay<=20;delay++)
        {
            PORTE = Port_fnd[3]; 
            PORTC = Port_char[j]; 
            delay_ms(5);     
            PORTE = Port_fnd[2]; 
            PORTC = Port_char[k];
            delay_ms(5);
            PORTE = Port_fnd[1]; 
            PORTC = Port_char[0];
            delay_ms(5);
            PORTE = Port_fnd[0]; 
            PORTC = Port_char[0];
            delay_ms(5);                                            
        }    
    }
    }
} 
    
    while(1)
    {
      PORTE = Port_fnd[3]; 
      PORTC = Port_char[0]; 
      delay_ms(5);     
      PORTE = Port_fnd[2]; 
      PORTC = Port_char[k];
      delay_ms(5);
      PORTE = Port_fnd[1]; 
      PORTC = Port_char[0];
      delay_ms(5);
      PORTE = Port_fnd[0]; 
      PORTC = Port_char[0];
      delay_ms(5);
      if(SET[SWING] != 1)
      {
      EX[SWING] =1;
      break;
      }      
    }
    
}

void SwLevTwo()            
{ 
if(EX[SWING] == 0)
{    
for(k=0;k<2;k++)
{
for(j=0;j<10;j++)
    {  
    for(delay=0;delay<=20;delay++)
        {
            PORTE = Port_fnd[3]; 
            PORTC = Port_char[j]; 
            delay_ms(5);     
            PORTE = Port_fnd[2]; 
            PORTC = Port_char[k];
            delay_ms(5);
            PORTE = Port_fnd[1]; 
            PORTC = Port_char[0];
            delay_ms(5);
            PORTE = Port_fnd[0]; 
            PORTC = Port_char[0];
            delay_ms(5);                                            
        }    
    }
    }
    }
    
else if(EX[SWING] == 1)
{
for(k=1;k<2;k++)
{
for(j=0;j<10;j++)
    {  
    for(delay=0;delay<=20;delay++)
        {
            PORTE = Port_fnd[3]; 
            PORTC = Port_char[j]; 
            delay_ms(5);     
            PORTE = Port_fnd[2]; 
            PORTC = Port_char[k];
            delay_ms(5);
            PORTE = Port_fnd[1]; 
            PORTC = Port_char[0];
            delay_ms(5);
            PORTE = Port_fnd[0]; 
            PORTC = Port_char[0];
            delay_ms(5);                                            
        }    
    }
    }
}

else if(EX[SWING] == 3)
{
for(k=2;k>=2;k--)
{
for(j=9;j>=0;j--)
    {  
    for(delay=0;delay<=20;delay++)
        {
            PORTE = Port_fnd[3]; 
            PORTC = Port_char[j]; 
            delay_ms(5);     
            PORTE = Port_fnd[2]; 
            PORTC = Port_char[k];
            delay_ms(5);
            PORTE = Port_fnd[1]; 
            PORTC = Port_char[0];
            delay_ms(5);
            PORTE = Port_fnd[0]; 
            PORTC = Port_char[0];
            delay_ms(5);                                            
        }    
    }
    }
} 
    
    while(1)
    {
      PORTE = Port_fnd[3]; 
      PORTC = Port_char[0]; 
      delay_ms(5);     
      PORTE = Port_fnd[2]; 
      PORTC = Port_char[k];
      delay_ms(5);
      PORTE = Port_fnd[1]; 
      PORTC = Port_char[0];
      delay_ms(5);
      PORTE = Port_fnd[0]; 
      PORTC = Port_char[0];
      delay_ms(5);
      if(SET[SWING] != 2)
      {
      EX[SWING] =2;
      break;
      }      
    }
}

void SwLevThree()            
{ 
if(EX[SWING] == 0)
{    
for(k=0;k<3;k++)
{
for(j=0;j<10;j++)
    {  
    for(delay=0;delay<=20;delay++)
        {
            PORTE = Port_fnd[3]; 
            PORTC = Port_char[j]; 
            delay_ms(5);     
            PORTE = Port_fnd[2]; 
            PORTC = Port_char[k];
            delay_ms(5);
            PORTE = Port_fnd[1]; 
            PORTC = Port_char[0];
            delay_ms(5);
            PORTE = Port_fnd[0]; 
            PORTC = Port_char[0];
            delay_ms(5);                                            
        }    
    }
    }
    }
    
else if(EX[SWING] == 1)
{
for(k=1;k<3;k++)
{
for(j=0;j<10;j++)
    {  
    for(delay=0;delay<=20;delay++)
        {
            PORTE = Port_fnd[3]; 
            PORTC = Port_char[j]; 
            delay_ms(5);     
            PORTE = Port_fnd[2]; 
            PORTC = Port_char[k];
            delay_ms(5);
            PORTE = Port_fnd[1]; 
            PORTC = Port_char[0];
            delay_ms(5);
            PORTE = Port_fnd[0]; 
            PORTC = Port_char[0];
            delay_ms(5);                                            
        }    
    }
    }
}

else if(EX[SWING] == 2)
{
for(k=2;k<3;k++)
{
for(j=0;j<10;j++)
    {  
    for(delay=0;delay<=20;delay++)
        {
            PORTE = Port_fnd[3]; 
            PORTC = Port_char[j]; 
            delay_ms(5);     
            PORTE = Port_fnd[2]; 
            PORTC = Port_char[k];
            delay_ms(5);
            PORTE = Port_fnd[1]; 
            PORTC = Port_char[0];
            delay_ms(5);
            PORTE = Port_fnd[0]; 
            PORTC = Port_char[0];
            delay_ms(5);                                            
        }    
    }
    }
} 
    
    while(1)
    {
      PORTE = Port_fnd[3]; 
      PORTC = Port_char[0]; 
      delay_ms(5);     
      PORTE = Port_fnd[2]; 
      PORTC = Port_char[k];
      delay_ms(5);
      PORTE = Port_fnd[1]; 
      PORTC = Port_char[0];
      delay_ms(5);
      PORTE = Port_fnd[0]; 
      PORTC = Port_char[0];
      delay_ms(5);
      if(SET[SWING] != 3)
      {
      EX[SWING] =3;
      break;
      }      
    }
}

void StartOut(void) //Atmega보드에서 dht11에 시작을 알리는 신호
{ 
    DDRF.0 = 0xFF;
    PORTF.0 = 0xFF;
    delay_ms (100); // 100ms High 유지
    PORTF.0 = 0x00;
    delay_ms (18); // 18ms Low 유지
    PORTF.0 = 0xFF;
    delay_us (30); //약 30us 동안 '1'유지
    PORTF.0 = 0x00;
    DDRF.0 = 0x00; // 응답신호와 데이터 신호를 받기 위해 입력으로 설정
     
    EICRB=0b00000011;    // ISC41=1, ISC40=1 ☞ 상승엣지시 인터럽트 작동(INT4)
    EIMSK=0b00010000;    // 외부 인터럽트4 인에이블 
    DHT_cnt=0;
}

void DHT_Read(void) //DHT11 data 40byte를 read
{
    
    delay_ms(100);
    StartOut();
    while(StDone==0);
    StDone = 0;
        
    humi = 0;
    temp = 0;
        
    for(i=0;i<8;i++)
    {
        if(bit_data[i+1]=='1')
            humi+=1<<(7-i);
    }
        
    for(i=0;i<8;i++)
    {
        if(bit_data[i+17]=='1')
            temp+=1<<(7-i);
    }
}  
  
