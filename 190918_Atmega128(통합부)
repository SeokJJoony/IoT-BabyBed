#define F_CPU 8000000UL
#include <mega128.h>
#include <delay.h>
//
typedef unsigned char INT8;
typedef unsigned int INT16;
//
#define BAUD 9600
#define U2X_S 2     // Set of U2X --> 1 or 2
#define MYUBRR ((F_CPU*U2X_S)/(16L*BAUD)-1)
#define sbi(reg,bit)    reg |= (1<<(bit))      // Set "bit"th bit of Register "reg"
#define cbi(reg,bit)    reg &= ~(1<<(bit))
#define MAXLEN 16
//
#define MP3_VOLUME                    0x06 // 0..30
#define MP3_PLAYBACK_SOURCE            0x09 // 0-U / 1-TF / 2-AUX / 3-SLEEP / 4-FLASH
#define MP3_PLAYBACK_SOURCE_TF            1
//
#define MOTOR_PORT        PORTC       // 스테핑 모터 연결 포트
#define MOTOR_PORT_DDR    DDRC        // 스테핑 모터 연결 포트의 DDR REG
#define MOTOR_ENABLE    (MOTOR_PORT = MOTOR_PORT|0x80)
#define MOTOR_DISABLE    (MOTOR_PORT = MOTOR_PORT&0x7f)
#define MOTOR_STEP_M0    (MOTOR_PORT = (MOTOR_PORT&0xcf)|0x00) // 16step
#define MOTOR_STEP_M1    (MOTOR_PORT = (MOTOR_PORT&0xcf)|0x10)
#define MOTOR_STEP_M2    (MOTOR_PORT = (MOTOR_PORT&0xcf)|0x20)
#define MOTOR_STEP_M3    (MOTOR_PORT = (MOTOR_PORT&0xcf)|0x30)
#define MOTOR_LEFT_CLK    (MOTOR_PORT = MOTOR_PORT^0x01)
#define MOTOR_RIGHT_CLK    (MOTOR_PORT = MOTOR_PORT^0x04)
#define MOTOR_LEFT_CW    (MOTOR_PORT = MOTOR_PORT&0xfd)
#define MOTOR_LEFT_CCW    (MOTOR_PORT = MOTOR_PORT|0x02)
#define MOTOR_RIGHT_CW    (MOTOR_PORT = MOTOR_PORT&0xf7)
#define MOTOR_RIGHT_CCW    (MOTOR_PORT = MOTOR_PORT|0x08)
//
#define nop2 {#asm("nop"); #asm("nop");}
#define nop8 {nop2; nop2; nop2; nop2;}
#define ws2812b PORTA.2
#define data1    PORTA.7
#define latch   PORTA.6
#define clk     PORTA.5
//
INT8 default_buffer[10] = {0x7E, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF}; // Default Buffer
volatile INT8 mp3_cmd_buf[10] = {0x7E, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};
volatile INT8 recv_buf[20] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
int buf_seg[4] = {0,0,0,0};     // 편의를 위한 전역 변수(버퍼) 생성 
unsigned int Port_char[] ={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90, 0x88, 0x83, 0xA7, 0xA1, 0x86, 0x8E, 0xFF};  // 0~F 의 문자표
unsigned int Port_fnd[] ={0x1f,0x2f,0x4f,0x8f,0x0f};    // FND0 ON, FND1 ON, FND2 ON, FND3 ON, ALL FND OFF
//
unsigned char ch;
//
char led[150][3]={0,};
char i;  
int shift;
// 
int play = 0,delay=0;
int pos=0;
int posMax=0;
int SET[6] = {0,0,0,0,0,0};
int EX[6] = {0,0,0,0,0,0}; 
//             
void SwingStop();
void SwingFirst();
void SwingSecond();
void SwingThird();
void USART_Init();
void USART0_Transmit( char data );
void USART1_Transmit( char data );
INT16 MP3_checksum (void);
void MP3_send_cmd (INT8 cmd, INT16 high_arg, INT16 low_arg);
void dfplayer_init(void);
void Init_Timer3A(void);
void Servo_motor(int angle);
void Print_Segment(int buf_seg[]);
void PORT_Init(void);
void Step_Motor();
void height();
void clk_out();
void clr_led(int n);
void byte_out(char d);
void LED_OUT(int x,int y, int z);
void SLEEP();
void AWAKE();
void PARENT();
//

void main(void)
{
    
    USART_Init(); // 9600/8/n/1/n
    dfplayer_init();
    Init_Timer3A();   
    PORT_Init(); 
    MP3_send_cmd(0x12,0,1);
    posMax=0;
    SREG = 0x80; 
     
    while(1)
    {
    
        for(delay=0;delay<=40;delay++)
        {
        Print_Segment(buf_seg); 
        }
         
        if(SET[0]==0)
        {
        SwingStop();
        }
        
        if(SET[0]==1)
        {       
        SwingFirst();      
        }
                  
        if(SET[0]==2)
        {        
        SwingSecond();
        }
        
         if(SET[0]==3)
        {        
        SwingThird();
        } 
        
        if(SET[5] == 1)
        {
          SLEEP();
        }
        
        if(SET[5] == 2)
        {
          AWAKE();
        } 
        
        if(SET[5] == 3)
        {
          PARENT();
        } 
        height();
        Step_Motor();
     }
}


    
void USART_Init( )
{
  UCSR1B = 0x98; // Receive interrupt
  UCSR0B = 0x98;    //Receive(RX) 및 Transmit(TX) Enable
  UCSR0C = UCSR1C = 0x06;    // UARTMode, 8 Bit Data, No Parity, 1 Stop Bit
  UBRR0H = UBRR1H = 0;       //16Mhz, baud rate = 115200 (if 9600, 0)
  UBRR0L = UBRR1L = 103;       //16Mhz, baud rate = 115200 (if 9600, 103)
}


void USART0_Transmit( char data )
{
    // Wait for empty transmit buffer
    while ( !( UCSR0A & 0x20 ) );   // (1<<UDRE) 
    
    // Put data into buffer, sends the data
    UDR0 = data;
}


void USART1_Transmit( char data )
{
    // Wait for empty transmit buffer
    while ( !( UCSR1A & 0x20 ) );   // (1<<UDRE) 
    
    // Put data into buffer, sends the data
    UDR1 = data;
} 

INT16 MP3_checksum (void)
{
    INT16 sum = 0;
    INT8 i;
    for (i=1; i<7; i++) {
        sum += mp3_cmd_buf[i];
    }
    return -sum;
}

void MP3_send_cmd (INT8 cmd, INT16 high_arg, INT16 low_arg)
{
    INT8 i;
    INT16 checksum;
    mp3_cmd_buf[3] = cmd;
    mp3_cmd_buf[5] = high_arg;
    mp3_cmd_buf[6] = low_arg;
    checksum = MP3_checksum();
    mp3_cmd_buf[7] = (INT8) ((checksum >> 8) & 0x00FF);
    mp3_cmd_buf[8] = (INT16) (checksum & 0x00FF);
    for( i=0; i< 10; i++){
        USART0_Transmit(mp3_cmd_buf[i]);
        //putchar(mp3_cmd_buf[i]);
        mp3_cmd_buf[i] = default_buffer[i];
    }
}

void dfplayer_init(void)
{
    MP3_send_cmd(MP3_PLAYBACK_SOURCE,0,MP3_PLAYBACK_SOURCE_TF);
    delay_ms(10);
    MP3_send_cmd(MP3_VOLUME, 0,10); 
    delay_ms(10);
}

void Init_Timer3A(void)
{
    TCCR3A = 0xAA;
    TCCR3B = 0x1A;
    
    OCR3AH = 3000>>8;
    OCR3AL = 3000&0xff;

    ICR3H = 39999>>8;
    ICR3L = 39999>>0xff;
}

void Servo_motor(int angle)
{
    OCR3AH = (angle*14+3640)>>8;
    OCR3AL = (angle*14+3640)&0xFF;
}

void Print_Segment(int buf_seg[])
{    
    PORTE = Port_fnd[3]; 
    PORTB = Port_char[buf_seg[3]];                 
}
   
void SwingStop(void)      
{
    if(buf_seg[3]>0)
    {
       while(1)
       {
       switch(posMax)
       {
       case 0:
          buf_seg[3]=0;
          break;
       case 8:
          buf_seg[3]=1;
          break;
       case 16:
          buf_seg[3]=2;
          break;
       case 24:
          buf_seg[3]=3;
          break; 
       case 32:
          buf_seg[3]=4;
          break;
       case 40:
          buf_seg[3]=5;
          break;
       case 48:
          buf_seg[3]=6;
          break;
       default:
          break;  
       } 
         
       Print_Segment(buf_seg);
       posMax-=4;
         
       for(pos=-posMax;pos<posMax;pos++)
        { 
        Servo_motor(pos);
        delay_ms(10);
        }
       
         for(pos=posMax;pos>-posMax;pos--)
        { 
        Servo_motor(pos);
        delay_ms(10);
        } 
        
       if(buf_seg[3]==0)
       {
       if(posMax<=0)
       break;
       }
       }
    }
    
}
    
void SwingFirst(void)
{
    if(buf_seg[3]>3)
    { 
        while(1)
       {  
        posMax-=4;
        
       switch(posMax)
       {
       case 0:
          buf_seg[3]=0;
          break;
       case 8:
          buf_seg[3]=1;
          break;
       case 16:
          buf_seg[3]=2;
          break;
       case 24:
          buf_seg[3]=3;
          break; 
       case 32:
          buf_seg[3]=4;
          break;
       case 40:
          buf_seg[3]=5;
          break;
       case 48:
          buf_seg[3]=6;
          break;
           case 56:
          buf_seg[3]=7;
          break;
       case 64:
          buf_seg[3]=8;
          break;
       case 72:
          buf_seg[3]=9;
          break;
       default:
          break;  
       }
          
       Print_Segment(buf_seg);
        
       for(pos=-posMax;pos<posMax;pos++)
        { 
        Servo_motor(pos);
        delay_ms(10);
        }

         for(pos=posMax;pos>-posMax;pos--)
        { 
        Servo_motor(pos);
        delay_ms(10);
        }
         
       if(buf_seg[3]==3)
       {
       if(posMax==24)
       break;
       } 

       }
    }


    if(buf_seg[3]==0)
    {
    while(1)
    {
    posMax+=4;

    switch(posMax)
    {
    case 8:
          buf_seg[3]=1;
          break;
    case 16:
          buf_seg[3]=2;
          break;
    case 24:
          buf_seg[3]=3;
          break;
    default:
     break;
    }         
      
    Print_Segment(buf_seg); 
         
    for(pos=-posMax;pos<posMax;pos++)
    { 
    Servo_motor(pos);
    delay_ms(10);
    }
    
    for(pos=posMax;pos>-posMax;pos--)
    { 
    Servo_motor(pos);
    delay_ms(10);
    }
    
    if(buf_seg[3]==3)
    {
    if(posMax==24)
    {
    break;
    }
    }
    }
} 

    
    if(buf_seg[3]==3)
    {
    if(posMax==24)
    {
            while(1)
            {   
                posMax=24;
                
                Print_Segment(buf_seg); 

                for(pos=-posMax;pos<posMax;pos++)
                { 
                Servo_motor(pos);
                delay_ms(10);
                }

                for(pos=posMax;pos>-posMax;pos--)
                { 
                Servo_motor(pos);
                delay_ms(10);
                }  
               if(SET[0]==0)
                {    
                SwingStop();
                break;
                }
                if(SET[0]==2)
                {
                 SwingSecond();
                 break;
                }
               if(SET[0]==3)
                {
                 SwingThird();
                 break;
                }
            }
    }
    }
}

void SwingSecond(void)
{
     if(buf_seg[3]>6)
    { 
        while(1)
       {  
        posMax-=4;
        
       switch(posMax)
       {
       case 0:
          buf_seg[3]=0;
          break;
       case 8:
          buf_seg[3]=1;
          break;
       case 16:
          buf_seg[3]=2;
          break;
       case 24:
          buf_seg[3]=3;
          break; 
       case 32:
          buf_seg[3]=4;
          break;
       case 40:
          buf_seg[3]=5;
          break;
       case 48:
          buf_seg[3]=6;
          break;
           case 56:
          buf_seg[3]=7;
          break;
       case 64:
          buf_seg[3]=8;
          break;
       case 72:
          buf_seg[3]=9;
          break;
       default:
          break;  
       }
          
       Print_Segment(buf_seg);       
         
       for(pos=-posMax;pos<posMax;pos++)
        { 
        Servo_motor(pos);
        delay_ms(10);
        }
       
         for(pos=posMax;pos>-posMax;pos--)
        { 
        Servo_motor(pos);
        delay_ms(10);
        } 
       if(buf_seg[3]==6)
       {
       if(posMax==48)
       break;
       }
       }
    }
    
     if(buf_seg[3]<6)
    {
    while(1)
    {
     posMax+=4;
    switch(posMax)
    {
    case  8:
          buf_seg[3]=1;
          break;
    case 16:
          buf_seg[3]=2;
          break;
    case 24:
          buf_seg[3]=3;
          break; 
    case 32:
          buf_seg[3]=4;
          break;
    case 40:
          buf_seg[3]=5;
          break;
    case 48:
          buf_seg[3]=6;
          break;
    default:
          break;
    }        
           
    Print_Segment(buf_seg); 
         
     for(pos=-posMax;pos<posMax;pos++)
    { 
    Servo_motor(pos);
    delay_ms(10);
    }
    
     for(pos=posMax;pos>-posMax;pos--)
    { 
    Servo_motor(pos);
    delay_ms(10);
    }
    
    if(buf_seg[3]==6)
    {
    if(posMax==48)
    {
    break;
    }
    }
    } 
    }
    
    if(buf_seg[3]==6)
    {
    if(posMax==48)
    {
            while(1)
            {   
                posMax=48;
                
            Print_Segment(buf_seg); 
          
            
                for(pos=-posMax;pos<posMax;pos++)
                { 
                Servo_motor(pos);
                delay_ms(10);
                }
           
                for(pos=posMax;pos>-posMax;pos--)
                { 
                Servo_motor(pos);
                delay_ms(10);
                }  
               if(SET[0]==0)
                {    
                SwingStop();
                break;
                }
                if(SET[0]==1)
                {
                 SwingFirst();
                 break;
                }
              if(SET[0]==3)
                {
                 SwingThird();
                 break;
                }
            }
    }
    }
}

void SwingThird(void)
{
   if(buf_seg[3]<9)
    {
    while(1)
    {
       posMax+=4;
    switch(posMax)
       {
       case 0:
          buf_seg[3]=0;
          break;
       case 8:
          buf_seg[3]=1;
          break;
       case 16:
          buf_seg[3]=2;
          break;
       case 24:
          buf_seg[3]=3;
          break; 
       case 32:
          buf_seg[3]=4;
          break;
       case 40:
          buf_seg[3]=5;
          break;
       case 48:
          buf_seg[3]=6;
          break;
           case 56:
          buf_seg[3]=7;
          break;
       case 64:
          buf_seg[3]=8;
          break;
       case 72:
          buf_seg[3]=9;
          break;
       default:
          break;  
       }   
          
            Print_Segment(buf_seg); 
         
    
     for(pos=-posMax;pos<posMax;pos++)
    { 
    Servo_motor(pos);
    delay_ms(10);
    }
    
     for(pos=posMax;pos>-posMax;pos--)
    { 
    Servo_motor(pos);
    delay_ms(10);
    }
    
    if(buf_seg[3]==9)
    {
    if(posMax==72)
    {
    break;
    }
    }
    } 
    }
    
    if(buf_seg[3]==9)
    {
    if(posMax==72)
    {
            while(1)
            {   
                posMax=72;
                
            Print_Segment(buf_seg); 
          
            
                for(pos=-posMax;pos<posMax;pos++)
                { 
                Servo_motor(pos);
                delay_ms(10);
                }
           
                for(pos=posMax;pos>-posMax;pos--)
                { 
                Servo_motor(pos);
                delay_ms(10);
                }  
                if(SET[0]==0)
                {    
                SwingStop();
                break;
                }
                if(SET[0]==1)
                {
                 SwingFirst();
                 break;
                }
                if(SET[0]==2)
                {
                 SwingSecond();
                 break;
                }
            }
    }
    }
}


void PORT_Init(void)
{
    DDRE.3 = 1;    
        //PORTE.4~PORTE.7 FND 출력  (PE.4 : FND0, PE.5, FND1, PE.6 : FND2, PE.7 : FND3)
    
    DDRE.7 = 1;
    DDRB = 0xff;    //세그먼트의 문자포트 출력(PB.0:a, PB.1:b, PB.2:c, PB.3:d, PB.4:e, PB.5:f, PB.6:g, PB.7:dot)    
    PORTE = 0x88;
    MOTOR_PORT_DDR = 0xff;
    DDRA = 0xff;
    PORTA.0 = 0;
    PORTA.1 = 0;
    PORTA.2 = 0;
    PORTA.3 = 0;
            
}


void Step_Motor()
{
    int i;
    int x = EX[1] - SET[1];
    if(x<0) x = x*(-1);
   
    MOTOR_STEP_M2;  
    if( EX[1] <  SET[1])  MOTOR_LEFT_CCW; 
    else if( EX[1] >  SET[1])  MOTOR_LEFT_CW;
    MOTOR_ENABLE;
     for(i=0;i<(x*3000);i++){
           MOTOR_LEFT_CLK;
           MOTOR_RIGHT_CLK; 
           delay_ms(2);
     }
    MOTOR_DISABLE;
    EX[1] = SET[1];
    

}
void height()
{
     int x =  EX[2]- SET[2];
     if(x<0) x = x*(-1);
     if(EX[2] < SET[2]) PORTA.2 = 1;
     else if(EX[2] > SET[2]) PORTA.2 = 0; 
     PORTA.0 = 1;
     delay_ms((x*3000));
     PORTA.0 = 0;
     EX[2] = SET[2];
}

void clk_out(){ clk=1; clk=0; }
void clr_led(int n){
    int i;
    for(data1=0,i=0;i<n;i++){ clk_out(); clk_out(); clk_out(); }
    latch=1; latch=0;
}  

void byte_out(char d){
    char i;
    for(i=0;i<8;i++){
        if(d&0x80){ ws2812b=1; nop8; ws2812b=0; } 
        else      { ws2812b=1; nop2; ws2812b=0; }
        d<<=1; 
    }
}

void LED_OUT(int x,int y, int z)
{    
    byte_out(y);        
    byte_out(x);        
    byte_out(z);
}

void SLEEP()
{
    height();
    Step_Motor();
    SET[0] = 3;
    while(1)
    {   
      for(delay=0;delay<=40;delay++)
        {
        Print_Segment(buf_seg); 
        }
         
        if(SET[0]==0)
        {
        SwingStop();
        USART1_Transmit('C');
        MP3_send_cmd(0x0D,0,0);    
        play = 0; 
        delay_ms(5000); 
        if(SET[3] == 2)
        {
           SET[5] = 2;
           USART1_Transmit('A'); 
           break;
        }
        else if(SET[3] == 1) SET[0] = 3;
        }
        
        if(SET[0]==1)
        {       
        SwingFirst();      
        }
                  
        if(SET[0]==2)
        {        
        SwingSecond();
        }
        
         if(SET[0]==3)
        {        
        SwingThird();
        SET[3] = 0;
        } 
        
        EX[3] = SET[3];
        
     }

}

void AWAKE()
{
   SET[3] = 0;
   while(1)
   {
     USART1_Transmit('C');
     delay_ms(5000);
     EX[3] = SET[3];
     if(EX[3] == 1)
     {
        SET[5] = 3;
        SET[3] = 0;
        break;
     }
   }

}

void PARENT()
{
   SET[4] = 0 ;
   while(1)
   {
     USART1_Transmit('D');
     delay_ms(5000);
     EX[4] = SET[4];
     if(EX[4]== 1)
     {
        SET[5] = 0;
        SET[4] = 0;
        SET[1] = 2;
        SET[2] = 3;
        break;
     }
   }


}

interrupt [USART1_RXC] void usart1_rx_isr(void)
{
              ch = UDR1;              
              switch(ch){
                 case '#' :            
                    MP3_send_cmd(0x01,0,0);   //다음 
                    break;
                 case '!' :
                    if(play==0)
                    {            
                      MP3_send_cmd(0x0E,0,0);    
                      play = 1;
                    }
                    else
                    {  
                      MP3_send_cmd(0x0D,0,0);    
                      play = 0;
                    }
                    break;
                 case '+' :            
                    MP3_send_cmd(0x04,0,0);
                    break;
                 case '-' :               
                    MP3_send_cmd(0x05,0,0);
                    break;
                 case 'D' :            
                    SET[0] = 0;   
                    break;
                 case 'E' :
                    SET[0] = 1;
                    break;
                 case 'F' :            
                    SET[0] = 2;
                    break;
                 case 'G' :               
                    SET[0] = 3;
                    break;
                 case 'L' :              
                    SET[1] = 0; // 등받이0단계
                    break;
                 case 'M' :
                    SET[1] = 1; // 등받이1단계
                    break;
                 case 'N' :               
                    SET[1] = 2; //등받이 2단계
                    break;
                 case 'O' :
                    SET[2] = 0;
                    break;
                  case 'P' :
                    SET[2] = 1;
                    break;
                   case 'Q' :
                    SET[2] = 2;
                    break;
                  case 'R' :
                    SET[2] = 3;
                    break;
                  case 'T':
                     SET[0] = 0;
                     SET[1] = 0;
                     SET[2] = 0;
                     SET[3] = 1;
                     SET[4] = 0;
                     SET[5] = 0;
                     break;
                  case 'A':
                     SET[3] = 1;
                     break;
                  case 'B':
                     SET[3] = 2;
                     break;
                  case 'V':
                     SET[4] = 1;
                     break;      
                 case '0' :
                 case '1' :
                 case '2' :
                 case '3' :
                 case '4' :
                 case '5' :
                 case '6' :
                 case '7' :
                 case '8' :
                 case '9' :
                     MP3_send_cmd(0x12,0,ch - 0x2F);
                 default  :
                    break;
              }
     
} 


interrupt [USART0_RXC] void usart0_rx_isr(void)
{          
              recv_buf[i] = UDR0;
              i++;     
              
              if(i == 20)
              {   
                i = 0;
               USART1_Transmit('S');
               if(SET[5]==1) SET[0]--;
                               
              }                       
}
